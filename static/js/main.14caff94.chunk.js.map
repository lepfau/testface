{"version":3,"sources":["newanimate.gltf","Newanimate.js","evening_meadow_4k.hdr","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","face","nodes","materials","animations","actions","useAnimations","useEffect","mouth","repetitions","clampWhenFinished","reset","fadeIn","play","fadeOut","smile","Smile","rock","Therock","sad","doubt","Perplex","scale","ref","dispose","position","name","geometry","FaceBuilderHead_mesh","material","kt_facebuilder_material","morphTargetDictionary","morphTargetInfluences","receiveShadow","shadowMap","castShadow","wireFrame","wireframe","FaceBuilderHead_mesh_1","preload","Loader","progress","useProgress","Html","center","style","color","width","fontSize","Math","round","App","useState","setSmile","setMouth","setRock","setSad","setDoubt","rotateSpeed","setRotateSpeed","className","Button","margin","textTransform","onClick","variant","height","backgroundColor","pixelRatio","camera","fov","intensity","fallback","Environment","files","hdr","background","onDoubleClick","setTimeout","OrbitControls","enablePan","autoRotate","autoRotateSpeed","maxPolarAngle","minDistance","maxDistance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAe,MAA0B,wC,QCO1B,SAASA,EAAT,GAA8B,IAAVC,EAAS,oBACpCC,EAAQC,mBACd,EAAyCC,YAAQC,GAAzCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,WAClBC,EAAYC,YAAcF,EAAYN,GAAtCO,QA0CR,OAxCAE,qBAAU,YACY,IAAhBV,EAAMW,OACRH,EAAQ,iBAAiBI,YAAc,EACvCJ,EAAQ,iBAAiBK,mBAAoB,EAC7CL,EAAQ,iBAAiBM,QAAQC,OAAO,IAAKC,QACxCR,EAAQ,iBAAiBS,QAAQ,KAEpB,IAAhBjB,EAAMkB,OACRV,EAAQW,MAAMP,YAAc,EAC5BJ,EAAQW,MAAMN,mBAAoB,EAClCL,EAAQW,MAAML,QAAQC,OAAO,IAAKC,QAElCR,EAAQW,MAAMF,QAAQ,KAGL,IAAfjB,EAAMoB,MACRZ,EAAQa,QAAQT,YAAc,EAC9BJ,EAAQa,QAAQR,mBAAoB,EACpCL,EAAQa,QAAQP,QAAQC,OAAO,IAAKC,QAEpCR,EAAQa,QAAQJ,QAAQ,KAGR,IAAdjB,EAAMsB,KACRd,EAAQc,IAAIV,YAAc,EAC1BJ,EAAQc,IAAIT,mBAAoB,EAChCL,EAAQc,IAAIR,QAAQC,OAAO,IAAKC,QAEhCR,EAAQc,IAAIL,QAAQ,KAGF,IAAhBjB,EAAMuB,OACRf,EAAQgB,QAAQZ,YAAc,EAC9BJ,EAAQgB,QAAQX,mBAAoB,EACpCL,EAAQgB,QAAQV,QAAQC,OAAO,IAAKC,QAEpCR,EAAQgB,QAAQP,QAAQ,OAK1B,gDACEQ,MAAO,IACPC,IAAKzB,GACDD,GAHN,IAIE2B,QAAS,KACTC,SAAU5B,EAAM4B,SALlB,UAOE,sBACEC,KAAK,uBACLC,SAAUzB,EAAM0B,qBAAqBD,SACrCE,SAAU1B,EAAU2B,wBACpBC,sBAAuB7B,EAAM0B,qBAAqBG,sBAClDC,sBAAuB9B,EAAM0B,qBAAqBI,sBAClDC,eAAe,EACfC,WAAW,EACXC,YAAY,EARd,SAUGtC,EAAMuC,UAAY,mCAAmBC,WAAS,IAAM,OAGvD,sBACEX,KAAK,yBACLC,SAAUzB,EAAMoC,uBAAuBX,SACvCE,SAAU1B,EAAU,gBACpB4B,sBACE7B,EAAMoC,uBAAuBP,sBAE/BC,sBACE9B,EAAMoC,uBAAuBN,4BAOvChC,IAAQuC,QAAQtC,G,kBCxFD,MAA0B,8CCUzC,SAASuC,IACP,IAAQC,EAAaC,cAAbD,SACR,OAAO,eAACE,EAAA,EAAD,CAAMC,QAAM,EAACC,MAAO,CAACC,MAAM,QAASC,MAAM,QAAUC,SAAS,QAA7D,UAAuEC,KAAKC,MAAMT,GAAlF,kBAGM,SAASU,IACtB,MAA0BC,oBAAS,GAAnC,mBAAOrC,EAAP,KAAcsC,EAAd,KACA,EAA0BD,oBAAS,GAAnC,mBAAO5C,EAAP,KAAc8C,EAAd,KACA,EAAwBF,oBAAS,GAAjC,mBAAOnC,EAAP,KAAasC,EAAb,KACA,EAAsBH,oBAAS,GAA/B,mBAAOjC,EAAP,KAAYqC,EAAZ,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOhC,EAAP,KAAcqC,EAAd,KACA,EAAsCL,mBAAS,IAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAWA,OACE,cAAC,IAAD,UACE,gCACE,sBAAKC,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CACEhB,MAAO,CAAEiB,OAAQ,MAAOC,cAAe,cACvCC,QAAS,WACPX,GAAUtC,GACVuC,GAAS,GACTC,GAAQ,GACRC,GAAO,GACPC,GAAS,IAEXQ,QAAQ,YATV,qBAaA,cAACJ,EAAA,EAAD,CACEhB,MAAO,CAAEiB,OAAQ,MAAOC,cAAe,cACvCC,QAAS,WACPV,GAAU9C,GACV6C,GAAS,GACTE,GAAQ,GACRC,GAAO,GACPC,GAAS,IAEXQ,QAAQ,YATV,uBAaA,cAACJ,EAAA,EAAD,CACEhB,MAAO,CAAEiB,OAAQ,MAAOC,cAAe,cACvCC,QAAS,WACPT,GAAStC,GACToC,GAAS,GACTC,GAAS,GACTE,GAAO,GACPC,GAAS,IAEXQ,QAAQ,YATV,mBAaA,cAACJ,EAAA,EAAD,CACEhB,MAAO,CAAEiB,OAAQ,MAAOC,cAAe,cACvCC,QAAS,WACPR,GAAQrC,GACRkC,GAAS,GACTC,GAAS,GACTC,GAAQ,GACRE,GAAS,IAEXQ,QAAQ,YATV,oBAaA,cAACJ,EAAA,EAAD,CACEhB,MAAO,CAAEiB,OAAQ,MAAOC,cAAe,cACvCC,QAAS,WACPP,GAAUrC,GACViC,GAAS,GACTC,GAAS,GACTC,GAAQ,GACRC,GAAO,IAETS,QAAQ,YATV,2BAeF,eAAC,IAAD,CACEL,UAAU,cACVf,MAAO,CACLqB,OAAQ,QACRC,gBAAgB,SAElBC,WAAY,CAAC,EAAG,GAChBC,OAAQ,CAAE5C,SAAU,CAAC,EAAG,EAAG,IAAK6C,IAAK,IAPvC,UASE,8BAAcC,UAAW,KAOzB,eAAC,WAAD,CAAUC,SAAU,cAAChC,EAAD,IAApB,UACE,cAACiC,EAAA,EAAD,CAAaC,MAAOC,EAAKC,YAAY,IACrC,cAAChF,EAAD,CACEiF,cAAe,kBAjGzBlB,EAAe,KACfmB,YAAW,WACTnB,EAAe,MACd,UACHL,GAAS,IA8FCvC,MAAOA,EACPP,MAAOA,EACPS,KAAMA,EACNE,IAAKA,EACLC,MAAOA,EACPK,SAAU,CAAC,GAAI,GAAK,QAMxB,cAACsD,EAAA,EAAD,CACEC,WAAW,EACXC,YAAY,EACZC,gBAAiBxB,EACjByB,cAAe,IACfC,YAAa,EACbC,YAAa,aC5IzB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14caff94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/newanimate.1b848ce8.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from \"react\";\nimport { useGLTF, useAnimations, MeshDistortMaterial } from \"@react-three/drei\";\nimport face from \"./newanimate.gltf\";\nexport default function Model({ ...props }) {\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(face);\n  const { actions } = useAnimations(animations, group);\n\n  useEffect(() => {\n    if (props.mouth === true) {\n      actions[\"Mouthopen.001\"].repetitions = 1;\n      actions[\"Mouthopen.001\"].clampWhenFinished = true;\n      actions[\"Mouthopen.001\"].reset().fadeIn(0.5).play();\n    } else actions[\"Mouthopen.001\"].fadeOut(0.5);\n\n    if (props.smile === true) {\n      actions.Smile.repetitions = 1;\n      actions.Smile.clampWhenFinished = true;\n      actions.Smile.reset().fadeIn(0.5).play();\n    } else {\n      actions.Smile.fadeOut(0.5);\n    }\n\n    if (props.rock === true) {\n      actions.Therock.repetitions = 1;\n      actions.Therock.clampWhenFinished = true;\n      actions.Therock.reset().fadeIn(0.5).play();\n    } else {\n      actions.Therock.fadeOut(0.5);\n    }\n\n    if (props.sad === true) {\n      actions.sad.repetitions = 1;\n      actions.sad.clampWhenFinished = true;\n      actions.sad.reset().fadeIn(0.5).play();\n    } else {\n      actions.sad.fadeOut(0.5);\n    }\n\n    if (props.doubt === true) {\n      actions.Perplex.repetitions = 1;\n      actions.Perplex.clampWhenFinished = true;\n      actions.Perplex.reset().fadeIn(0.5).play();\n    } else {\n      actions.Perplex.fadeOut(0.5);\n    }\n  });\n\n  return (\n    <group\n      scale={1.5}\n      ref={group}\n      {...props}\n      dispose={null}\n      position={props.position}\n    >\n      <mesh\n        name=\"FaceBuilderHead_mesh\"\n        geometry={nodes.FaceBuilderHead_mesh.geometry}\n        material={materials.kt_facebuilder_material}\n        morphTargetDictionary={nodes.FaceBuilderHead_mesh.morphTargetDictionary}\n        morphTargetInfluences={nodes.FaceBuilderHead_mesh.morphTargetInfluences}\n        receiveShadow={true}\n        shadowMap={true}\n        castShadow={true}\n      >\n        {props.wireFrame ? <meshBasicMaterial wireframe /> : null}\n      </mesh>\n\n      <mesh\n        name=\"FaceBuilderHead_mesh_1\"\n        geometry={nodes.FaceBuilderHead_mesh_1.geometry}\n        material={materials[\"Material.003\"]}\n        morphTargetDictionary={\n          nodes.FaceBuilderHead_mesh_1.morphTargetDictionary\n        }\n        morphTargetInfluences={\n          nodes.FaceBuilderHead_mesh_1.morphTargetInfluences\n        }\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(face);\n","export default __webpack_public_path__ + \"static/media/evening_meadow_4k.9c7be875.hdr\";","import React, { Suspense, useState, useEffect } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, Effects } from \"@react-three/drei\";\nimport { Html, useProgress, Environment } from \"@react-three/drei\";\nimport Model from \"./Newanimate\";\nimport \"./App.css\";\nimport Button from \"@mui/material/Button\";\nimport hdr from \"./evening_meadow_4k.hdr\";\n\nfunction Loader() {\n  const { progress } = useProgress();\n  return <Html center style={{color:\"white\", width:\"150px\",  fontSize:\"15px\"}}>{Math.round(progress)} % Chargé</Html>;\n}\n\nexport default function App() {\n  const [smile, setSmile] = useState(false);\n  const [mouth, setMouth] = useState(false);\n  const [rock, setRock] = useState(false);\n  const [sad, setSad] = useState(false);\n  const [doubt, setDoubt] = useState(false);\n  const [rotateSpeed, setRotateSpeed] = useState(0.1);\n  \n\n  const headRotation = () => {\n    setRotateSpeed(100);\n    setTimeout(() => {\n      setRotateSpeed(0.2);\n    }, 1000);\n    setMouth(true);\n  };\n\n  return (\n    <HashRouter>\n      <div>\n        <div className=\"btn_container\">\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setSmile(!smile);\n              setMouth(false);\n              setRock(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Content\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setMouth(!mouth);\n              setSmile(false);\n              setRock(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Choqué\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setRock(!rock);\n              setSmile(false);\n              setMouth(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Doute\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setSad(!sad);\n              setSmile(false);\n              setMouth(false);\n              setRock(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Triste\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setDoubt(!doubt);\n              setSmile(false);\n              setMouth(false);\n              setRock(false);\n              setSad(false);\n            }}\n            variant=\"contained\"\n          >\n            Méfiant\n          </Button>\n\n        </div>\n        <Canvas\n          className=\"canvasstyle\"\n          style={{\n            height: \"100vh\",\n            backgroundColor:'black'\n          }}\n          pixelRatio={[1, 2]}\n          camera={{ position: [0, 0, 10], fov: 25 }}\n        >\n          <ambientLight intensity={0.3} />\n          {/* <ambientLightProbe  intensity={1}/> */}\n          {/* <directionalLight position={[0.5, 0, 0.866]} intensity={0.2}/> */}\n          {/* <spotLight position={[3, 3, 3]}  intensity={1}/> */}\n          {/* <pointLight position={[-2,0, -2]}  intensity={1}/> */}\n          {/* <hemisphereLight position={[0, 0, 0]} intensity={0.2} /> */}\n\n          <Suspense fallback={<Loader />}>\n            <Environment files={hdr} background={true} />\n            <Model\n              onDoubleClick={() => headRotation()}\n              smile={smile}\n              mouth={mouth}\n              rock={rock}\n              sad={sad}\n              doubt={doubt}\n              position={[0, -0.2, 0]}\n            />\n\n    \n          </Suspense>\n\n          <OrbitControls\n            enablePan={false}\n            autoRotate={true}\n            autoRotateSpeed={rotateSpeed}\n            maxPolarAngle={1.5}\n            minDistance={6}\n            maxDistance={15}\n          />\n        </Canvas>\n      </div>\n    </HashRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}