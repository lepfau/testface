{"version":3,"sources":["340452.png","newanimate.gltf","Newanimate.js","react3dlogo.gltf","React3dlogo.js","jslogo.gltf","Jslogo.js","nodelogo.gltf","Nodelogo.js","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","face","nodes","materials","animations","actions","useAnimations","useEffect","mouth","repetitions","clampWhenFinished","reset","fadeIn","play","fadeOut","smile","Smile","rock","Therock","sad","doubt","Perplex","ref","dispose","position","name","geometry","FaceBuilderHead_mesh","material","kt_facebuilder_material","morphTargetDictionary","morphTargetInfluences","FaceBuilderHead_mesh_1","preload","othermodel","console","log","turn","Curve","rotation","jsmodel","CurveAction","scale","nodelogo","Loader","progress","useProgress","Html","center","App","useState","setSmile","setMouth","setRock","setSad","setDoubt","className","Button","onClick","variant","style","height","background","pixelRatio","camera","fov","intensity","fallback","Environment","preset","OrbitControls","autoRotate","autoRotateSpeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6b2299d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/340452.2f7b53cf.png\";","export default __webpack_public_path__ + \"static/media/newanimate.1b848ce8.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport face from \"./newanimate.gltf\";\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(face)\n  const { actions } = useAnimations(animations, group)\n\n  useEffect(() => {\n    if (props.mouth === true) {\n      actions[\"Mouthopen.001\"].repetitions = 1;\n      actions[\"Mouthopen.001\"].clampWhenFinished = true;\n      actions[\"Mouthopen.001\"].reset().fadeIn(0.5).play();\n    } else actions[\"Mouthopen.001\"].fadeOut(0.5);\n\n    if (props.smile === true) {\n      actions.Smile.repetitions = 1;\n  \n      actions.Smile.clampWhenFinished = true;\n      actions.Smile.reset().fadeIn(0.5).play();\n    } else {\n      actions.Smile.fadeOut(0.5);\n    }\n\n    if (props.rock === true) {\n      actions.Therock.repetitions = 1;\n      actions.Therock.clampWhenFinished = true;\n      actions.Therock.reset().fadeIn(0.5).play();\n    } else {\n      actions.Therock.fadeOut(0.5);\n    }\n\n    if (props.sad === true) {\n      actions.sad.repetitions = 1;\n      actions.sad.clampWhenFinished = true;\n      actions.sad.reset().fadeIn(0.5).play();\n    } else {\n      actions.sad.fadeOut(0.5);\n    }\n\n    if (props.doubt === true) {\n      actions.Perplex.repetitions = 1;\n      actions.Perplex.clampWhenFinished = true;\n      actions.Perplex.reset().fadeIn(0.5).play();\n    } else {\n      actions.Perplex.fadeOut(0.5);\n    }\n\n  });\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[0, -0.5, 0.02]}>\n        <mesh\n          name=\"FaceBuilderHead_mesh\"\n          geometry={nodes.FaceBuilderHead_mesh.geometry}\n          material={materials.kt_facebuilder_material}\n          morphTargetDictionary={nodes.FaceBuilderHead_mesh.morphTargetDictionary}\n          morphTargetInfluences={nodes.FaceBuilderHead_mesh.morphTargetInfluences}\n        />\n        <mesh\n          name=\"FaceBuilderHead_mesh_1\"\n          geometry={nodes.FaceBuilderHead_mesh_1.geometry}\n          material={materials['Material.003']}\n          morphTargetDictionary={nodes.FaceBuilderHead_mesh_1.morphTargetDictionary}\n          morphTargetInfluences={nodes.FaceBuilderHead_mesh_1.morphTargetInfluences}\n        />\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload(face)\n","export default __webpack_public_path__ + \"static/media/react3dlogo.db0d8e08.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport othermodel from \"./react3dlogo.gltf\"\n\n\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(othermodel)\n  const { actions } = useAnimations(animations, group)\n\n  useEffect(() => {\n    console.log(actions)\n    actions.turn.play()\n  })\n\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        name=\"Curve\"\n        geometry={nodes.Curve.geometry}\n        material={materials['SVGMat.006']}\n        position={[2, 5, 0]}\n        rotation={[0, 0, 0]}\n    \n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(othermodel)\n","export default __webpack_public_path__ + \"static/media/jslogo.a21ea10a.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport jsmodel from \"./jslogo.gltf\"\n\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(jsmodel)\n  const { actions } = useAnimations(animations, group)\n  useEffect(() => {\n    console.log(actions)\n    actions.CurveAction.play()\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        name=\"Curve\"\n        geometry={nodes.Curve.geometry}\n        material={materials['SVGMat.001']}\n        position={[1.2, 1.5, 0]}\n        rotation={[1.57, 0, 1.56]}\n        scale={3}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(jsmodel)\n","export default __webpack_public_path__ + \"static/media/nodelogo.971876f3.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport nodelogo from \"./nodelogo.gltf\"\n\n\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(nodelogo)\n  const { actions } = useAnimations(animations, group)\n  useEffect(() => {\n    console.log(actions)\n    actions.CurveAction.play()\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        name=\"Curve\"\n        geometry={nodes.Curve.geometry}\n        material={materials['SVGMat.001']}\n        position={[1.3, 1.6, 1]}\n        // rotation={[1.57, 0, 1.56]}\n        scale={7}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(nodelogo)\n","import React, { Suspense, useRef, useState } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport {\n  OrbitControls,\n  ContactShadows,\n  Environment,\n  useGLTF,\n  Detailed,\n} from \"@react-three/drei\";\nimport background from \"./340452.png\";\nimport { Html, useProgress, Stage} from \"@react-three/drei\";\nimport Model from \"./Newanimate\";\n\nimport ReactModel from \"./React3dlogo\"\nimport Jslogo from \"./Jslogo\"\nimport Nodelogo from \"./Nodelogo\"\nimport \"./App.css\";\nimport Button from '@mui/material/Button';\n\n\n\nfunction Loader() {\n  const { progress } = useProgress();\n  return <Html center>{progress} % loaded</Html>;\n}\n\nexport default function App() {\n\nconst [smile, setSmile] = useState(false);\nconst [mouth, setMouth] = useState(false);\nconst [rock, setRock] = useState(false);\nconst [sad, setSad] = useState(false);\nconst [doubt, setDoubt] = useState(false)\n\n  return (\n    <HashRouter>\n<div>\n<div className=\"btn_container\">\n<Button  onClick={() => {setSmile(!smile); setMouth(false); setRock(false); setSad(false); setDoubt(false)}} variant=\"contained\">Content</Button>\n<Button onClick={() => {setMouth(!mouth); setSmile(false); setRock(false); setSad(false); setDoubt(false)}} variant=\"contained\">Choqué</Button>\n<Button onClick={() => {setRock(!rock); setSmile(false); setMouth(false); setSad(false); setDoubt(false)}}variant=\"contained\">The Rock</Button>\n<Button onClick={() => {setSad(!sad); setSmile(false); setMouth(false); setRock(false); setDoubt(false)}}variant=\"contained\">Triste</Button>\n<Button onClick={() => {setDoubt(!doubt); setSmile(false); setMouth(false); setRock(false); setSad(false)}}variant=\"contained\">Doute</Button>\n</div>\n      <Canvas \n        className=\"canvasstyle\"\n        style={{\n          height: \"100vh\",\n          background: `no-repeat center/100% 100% url(${background})`,\n        }}\n        pixelRatio={[1, 2]}\n     \n        camera={{ position: [0, 0, 10], fov: 30}}\n      >\n       \n        <ambientLight intensity={0.3} />\n        {/* <spotLight intensity={0.5} position={[20, 50, 100]} color={\"lightyellow\"}   aoMapIntensity={1} /> */}\n        {/* <pointLight intensity={1} position={[5, 5, 5]} decay={1} distance={300} shadow={1} color={\"lightyellow\"} /> */}\n        <Suspense fallback={<Loader />}>\n    \n   <group >\n          <Model smile={smile} mouth={mouth} rock={rock} sad={sad} doubt={doubt}/>\n   <ReactModel scale={2} position={[-1, 0, 0]}/>\n   <Jslogo />\n   <Nodelogo/>\n    </group>\n\n          <Environment preset={'sunset'}/>\n        </Suspense>\n        <OrbitControls autoRotate = {true} autoRotateSpeed = {0.2} />\n     \n      </Canvas>\n      \n\n</div>\n    </HashRouter>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}