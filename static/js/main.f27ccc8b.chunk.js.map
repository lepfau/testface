{"version":3,"sources":["space.jpg","newanimate.gltf","Newanimate.js","medkit.gltf","Medkit.js","evening_meadow_4k.hdr","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","face","nodes","materials","animations","actions","useAnimations","useEffect","mouth","repetitions","clampWhenFinished","reset","fadeIn","play","fadeOut","smile","Smile","rock","Therock","sad","doubt","Perplex","scale","ref","dispose","position","name","geometry","FaceBuilderHead_mesh","material","kt_facebuilder_material","morphTargetDictionary","morphTargetInfluences","receiveShadow","shadowMap","castShadow","FaceBuilderHead_mesh_1","preload","medkit","Loader","progress","useProgress","Html","center","Math","round","App","useState","setSmile","setMouth","setRock","setSad","setDoubt","rotateSpeed","setRotateSpeed","className","Button","style","margin","textTransform","onClick","variant","height","background","backgroundSize","pixelRatio","camera","fov","intensity","fallback","Environment","files","hdr","onDoubleClick","setTimeout","OrbitControls","enablePan","autoRotate","autoRotateSpeed","maxPolarAngle","minDistance","maxDistance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f27ccc8b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/space.ddeee4ed.jpg\";","export default __webpack_public_path__ + \"static/media/newanimate.1b848ce8.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from 'react'\nimport { useGLTF, useAnimations, MeshDistortMaterial} from '@react-three/drei'\nimport face from \"./newanimate.gltf\";\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF(face)\n  const { actions } = useAnimations(animations, group)\n\n\n\n  \n  useEffect(() => {\n    if (props.mouth === true) {\n      actions[\"Mouthopen.001\"].repetitions = 1;\n      actions[\"Mouthopen.001\"].clampWhenFinished = true;\n      actions[\"Mouthopen.001\"].reset().fadeIn(0.5).play();\n    } else actions[\"Mouthopen.001\"].fadeOut(0.5);\n\n    if (props.smile === true) {\n      actions.Smile.repetitions = 1;\n      actions.Smile.clampWhenFinished = true;\n      actions.Smile.reset().fadeIn(0.5).play();\n    } else {\n      actions.Smile.fadeOut(0.5);\n    }\n\n    if (props.rock === true) {\n      actions.Therock.repetitions = 1;\n      actions.Therock.clampWhenFinished = true;\n      actions.Therock.reset().fadeIn(0.5).play();\n    } else {\n      actions.Therock.fadeOut(0.5);\n    }\n\n    if (props.sad === true) {\n      actions.sad.repetitions = 1;\n      actions.sad.clampWhenFinished = true;\n      actions.sad.reset().fadeIn(0.5).play();\n    } else {\n      actions.sad.fadeOut(0.5);\n    }\n\n    if (props.doubt === true) {\n      actions.Perplex.repetitions = 1;\n      actions.Perplex.clampWhenFinished = true;\n      actions.Perplex.reset().fadeIn(0.5).play();\n    } else {\n      actions.Perplex.fadeOut(0.5);\n    }\n\n  });\n\n  return (\n\n    <group scale={1.5} ref={group} {...props} dispose={null} position={props.position} >\n\n        <mesh \n          name=\"FaceBuilderHead_mesh\"\n          geometry={nodes.FaceBuilderHead_mesh.geometry}\n      \n          material={materials.kt_facebuilder_material} \n          morphTargetDictionary={nodes.FaceBuilderHead_mesh.morphTargetDictionary}\n          morphTargetInfluences={nodes.FaceBuilderHead_mesh.morphTargetInfluences}\n        receiveShadow={true}\n        shadowMap={true}\n        castShadow={true}\n        />  \n     \n        \n        <mesh\n          name=\"FaceBuilderHead_mesh_1\"\n          geometry={nodes.FaceBuilderHead_mesh_1.geometry}\n          material={materials['Material.003']}\n          morphTargetDictionary={nodes.FaceBuilderHead_mesh_1.morphTargetDictionary}\n          morphTargetInfluences={nodes.FaceBuilderHead_mesh_1.morphTargetInfluences}\n        />\n \n    </group>\n  \n  )\n}\n\nuseGLTF.preload(face)\n","export default __webpack_public_path__ + \"static/media/medkit.c4cfa25d.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport medkit from \"../src/medkit.gltf\"\n\nexport default function Model({ ...props }) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF(medkit)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[2.38, 2.03, -0.82]} scale={[0.45, 1, 1]}>\n        <pointLight intensity={1} decay={2} color=\"#c7dbff\" rotation={[-Math.PI / 2, 0, 0]} />\n      </group>\n      <group position={[-2.31, 2.03, -0.82]} scale={[0.45, 1, 1]}>\n        <pointLight intensity={1} decay={2} color=\"#caddff\" rotation={[-Math.PI / 2, 0, 0]} />\n      </group>\n      <group position={[0, -2.5, -0.2]} scale={4.3} rotation={[0, 0.8, 0]} >\n        <mesh  geometry={nodes.Плоскость004_1.geometry} material={materials.Med_Kit} />\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload(medkit)\n","export default __webpack_public_path__ + \"static/media/evening_meadow_4k.9c7be875.hdr\";","import React, { Suspense, useState, useEffect } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, Effects } from \"@react-three/drei\";\nimport background from \"./space.jpg\";\nimport { Html, useProgress, Environment } from \"@react-three/drei\";\nimport Model from \"./Newanimate\";\nimport Medkit from \"./Medkit\";\nimport { Light } from \"three\";\nimport \"./App.css\";\nimport Button from \"@mui/material/Button\";\nimport hdr from \"./evening_meadow_4k.hdr\";\n\nfunction Loader() {\n  const { progress } = useProgress();\n  return <Html center>{Math.round(progress)} % Chargé</Html>;\n}\n\n\n\nexport default function App() {\n  const [smile, setSmile] = useState(false);\n  const [mouth, setMouth] = useState(false);\n  const [rock, setRock] = useState(false);\n  const [sad, setSad] = useState(false);\n  const [doubt, setDoubt] = useState(false);\n  const [rotateSpeed, setRotateSpeed] = useState(0.2);\n\n  const headRotation = () => {\n    setRotateSpeed(100);\n    setTimeout(() => {\n      setRotateSpeed(0.2);\n    }, 1000);\n    setMouth(true);\n  };\n\n\n\n  return (\n    <HashRouter>\n      <div>\n        <div className=\"btn_container\">\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setSmile(!smile);\n              setMouth(false);\n              setRock(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Content\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setMouth(!mouth);\n              setSmile(false);\n              setRock(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Choqué\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setRock(!rock);\n              setSmile(false);\n              setMouth(false);\n              setSad(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Doute\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setSad(!sad);\n              setSmile(false);\n              setMouth(false);\n              setRock(false);\n              setDoubt(false);\n            }}\n            variant=\"contained\"\n          >\n            Triste\n          </Button>\n          <Button\n            style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n            onClick={() => {\n              setDoubt(!doubt);\n              setSmile(false);\n              setMouth(false);\n              setRock(false);\n              setSad(false);\n            }}\n            variant=\"contained\"\n          >\n            Méfiant\n          </Button>\n        </div>\n        <Canvas\n          className=\"canvasstyle\"\n          style={{\n            height: \"100vh\",\n            background: `no-repeat center/100% 100% url(${background})`,\n            backgroundSize: \"cover\",\n          }}\n          pixelRatio={[1, 2]}\n          camera={{ position: [2, 0, 10], fov: 30 }}\n          \n        >\n        \n          <ambientLight intensity={0.3} />\n          {/* <ambientLightProbe  intensity={1}/> */}\n{/* <directionalLight position={[0.5, 0, 0.866]} intensity={0.2}/> */}\n          {/* <spotLight position={[3, 3, 3]}  intensity={1}/> */}\n          {/* <pointLight position={[-2,0, -2]}  intensity={1}/> */}\n          {/* <hemisphereLight position={[0, 0, 0]} intensity={0.2} /> */}\n          \n        \n          <Suspense fallback={<Loader />}>\n          \n          <Environment files={hdr} position={[0, 0, 0]} background={true} />\n              <Model\n                onDoubleClick={() => headRotation()}\n                smile={smile}\n                mouth={mouth}\n                rock={rock}\n                sad={sad}\n                doubt={doubt}\n                position={[0, 0, 0]}\n              />\n          \n     \n          </Suspense>\n   \n          <OrbitControls\n           \n            enablePan={false}\n            autoRotate={true}\n            autoRotateSpeed={rotateSpeed}\n            maxPolarAngle={1.5}\n            minDistance={6}\n            maxDistance={15}\n          />\n\n          \n        </Canvas>\n      </div>\n    </HashRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}