{"version":3,"sources":["components/Buttons.js","assets/newanimate.gltf","components/Newanimate.js","assets/evening_meadow_4k.hdr","components/CanvasPart.js","pages/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","setSmile","setMouth","setRock","setSad","setDoubt","smile","mouth","rock","sad","doubt","className","Button","style","margin","textTransform","onClick","variant","Model","group","useRef","useGLTF","face","nodes","materials","animations","actions","useAnimations","useEffect","repetitions","clampWhenFinished","reset","fadeIn","play","fadeOut","Smile","Therock","Perplex","scale","ref","dispose","position","name","geometry","FaceBuilderHead_mesh","material","kt_facebuilder_material","morphTargetDictionary","morphTargetInfluences","receiveShadow","shadowMap","castShadow","wireFrame","wireframe","FaceBuilderHead_mesh_1","preload","CanvasPart","rotateSpeed","headRotation","Loader","progress","useProgress","Html","center","color","width","fontSize","Math","round","height","backgroundColor","pixelRatio","camera","fov","intensity","fallback","Environment","files","hdr","background","onDoubleClick","OrbitControls","enablePan","autoRotate","autoRotateSpeed","maxPolarAngle","minDistance","maxDistance","Main","useState","setRotateSpeed","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32bff887.chunk.js","sourcesContent":["import React from 'react'\nimport Button from \"@mui/material/Button\";\n\nfunction Buttons(props) {\n\nconst {setSmile, setMouth, setRock, setSad, setDoubt, smile, mouth, rock, sad, doubt} = props\n\n    return (\n        <div className=\"btn_container\">\n        <Button\n          style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n          onClick={() => {\n            setSmile(!smile);\n            setMouth(false);\n            setRock(false);\n            setSad(false);\n            setDoubt(false);\n          }}\n          variant=\"contained\"\n        >\n          Content\n        </Button>\n        <Button\n          style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n          onClick={() => {\n            setMouth(!mouth);\n            setSmile(false);\n            setRock(false);\n            setSad(false);\n            setDoubt(false);\n          }}\n          variant=\"contained\"\n        >\n          Choqué\n        </Button>\n        <Button\n          style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n          onClick={() => {\n            setRock(!rock);\n            setSmile(false);\n            setMouth(false);\n            setSad(false);\n            setDoubt(false);\n          }}\n          variant=\"contained\"\n        >\n          Doute\n        </Button>\n        <Button\n          style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n          onClick={() => {\n            setSad(!sad);\n            setSmile(false);\n            setMouth(false);\n            setRock(false);\n            setDoubt(false);\n          }}\n          variant=\"contained\"\n        >\n          Triste\n        </Button>\n        <Button\n          style={{ margin: \"5px\", textTransform: \"capitalize\" }}\n          onClick={() => {\n            setDoubt(!doubt);\n            setSmile(false);\n            setMouth(false);\n            setRock(false);\n            setSad(false);\n          }}\n          variant=\"contained\"\n        >\n          Méfiant\n        </Button>\n\n      </div>\n    )\n}\n\nexport default Buttons\n","export default __webpack_public_path__ + \"static/media/newanimate.1b848ce8.gltf\";","import React, { useRef, useEffect } from \"react\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport face from \"../assets/newanimate.gltf\";\n\nexport default function Model({ ...props }) {\n  \n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(face);\n  const { actions } = useAnimations(animations, group);\n\n  useEffect(() => {\n    if (props.mouth === true) {\n      actions[\"Mouthopen.001\"].repetitions = 1;\n      actions[\"Mouthopen.001\"].clampWhenFinished = true;\n      actions[\"Mouthopen.001\"].reset().fadeIn(0.5).play();\n    } else actions[\"Mouthopen.001\"].fadeOut(0.5);\n\n    if (props.smile === true) {\n      actions.Smile.repetitions = 1;\n      actions.Smile.clampWhenFinished = true;\n      actions.Smile.reset().fadeIn(0.5).play();\n    } else {\n      actions.Smile.fadeOut(0.5);\n    }\n\n    if (props.rock === true) {\n      actions.Therock.repetitions = 1;\n      actions.Therock.clampWhenFinished = true;\n      actions.Therock.reset().fadeIn(0.5).play();\n    } else {\n      actions.Therock.fadeOut(0.5);\n    }\n\n    if (props.sad === true) {\n      actions.sad.repetitions = 1;\n      actions.sad.clampWhenFinished = true;\n      actions.sad.reset().fadeIn(0.5).play();\n    } else {\n      actions.sad.fadeOut(0.5);\n    }\n\n    if (props.doubt === true) {\n      actions.Perplex.repetitions = 1;\n      actions.Perplex.clampWhenFinished = true;\n      actions.Perplex.reset().fadeIn(0.5).play();\n    } else {\n      actions.Perplex.fadeOut(0.5);\n    }\n  });\n\n  return (\n    <group\n      scale={1.5}\n      ref={group}\n      {...props}\n      dispose={null}\n      position={props.position}\n    >\n      <mesh\n        name=\"FaceBuilderHead_mesh\"\n        geometry={nodes.FaceBuilderHead_mesh.geometry}\n        material={materials.kt_facebuilder_material}\n        morphTargetDictionary={nodes.FaceBuilderHead_mesh.morphTargetDictionary}\n        morphTargetInfluences={nodes.FaceBuilderHead_mesh.morphTargetInfluences}\n        receiveShadow={true}\n        shadowMap={true}\n        castShadow={true}\n      >\n        {props.wireFrame ? <meshBasicMaterial wireframe /> : null}\n      </mesh>\n\n      <mesh\n        name=\"FaceBuilderHead_mesh_1\"\n        geometry={nodes.FaceBuilderHead_mesh_1.geometry}\n        material={materials[\"Material.003\"]}\n        morphTargetDictionary={\n          nodes.FaceBuilderHead_mesh_1.morphTargetDictionary\n        }\n        morphTargetInfluences={\n          nodes.FaceBuilderHead_mesh_1.morphTargetInfluences\n        }\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(face);\n","export default __webpack_public_path__ + \"static/media/evening_meadow_4k.9c7be875.hdr\";","import React, { Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Html, useProgress, Environment } from \"@react-three/drei\";\n\nimport Model from \"../components/Newanimate\";\nimport hdr from \"../assets/evening_meadow_4k.hdr\";\n\nfunction CanvasPart(props) {\n  const { smile, mouth, rock, sad, doubt, rotateSpeed, headRotation } = props;\n\n  function Loader() {\n    const { progress } = useProgress();\n    return (\n      <Html center style={{ color: \"white\", width: \"150px\", fontSize: \"15px\" }}>\n        {Math.round(progress)} % Chargé\n      </Html>\n    );\n  }\n\n  return (\n    <Canvas\n      style={{\n        height: \"100vh\",\n        backgroundColor: \"black\",\n      }}\n      pixelRatio={[1, 2]}\n      camera={{ position: [0, 0, 10], fov: 25 }}\n    >\n      <ambientLight intensity={0.3} />\n\n      <Suspense fallback={<Loader />}>\n        <Environment files={hdr} background={true} />\n        <Model\n          onDoubleClick={() => headRotation()}\n          smile={smile}\n          mouth={mouth}\n          rock={rock}\n          sad={sad}\n          doubt={doubt}\n          position={[0, -0.2, 0]}\n        />\n      </Suspense>\n\n      <OrbitControls\n        enablePan={false}\n        autoRotate={true}\n        autoRotateSpeed={rotateSpeed}\n        maxPolarAngle={1.5}\n        minDistance={6}\n        maxDistance={15}\n      />\n    </Canvas>\n  );\n}\n\nexport default CanvasPart;\n","import React, { useState } from \"react\";\nimport Buttons from \"../components/Buttons\";\nimport CanvasPart from \"../components/CanvasPart\";\n\nfunction Main() {\n  const [smile, setSmile] = useState(false);\n  const [mouth, setMouth] = useState(false);\n  const [rock, setRock] = useState(false);\n  const [sad, setSad] = useState(false);\n  const [doubt, setDoubt] = useState(false);\n  const [rotateSpeed, setRotateSpeed] = useState(0.1);\n\n  const headRotation = () => {\n    setRotateSpeed(100);\n    setTimeout(() => {\n      setRotateSpeed(0.2);\n    }, 1000);\n    setMouth(true);\n  };\n\n  return (\n    <div>\n      <Buttons\n        setSmile={setSmile}\n        setMouth={setMouth}\n        setRock={setRock}\n        setSad={setSad}\n        setDoubt={setDoubt}\n        setRotateSpeed={setRotateSpeed}\n        smile={smile}\n        mouth={mouth}\n        rock={rock}\n        doubt={doubt}\n        sad={sad}\n        rotateSpeed={rotateSpeed}\n      />\n\n      <CanvasPart\n        smile={smile}\n        mouth={mouth}\n        rock={rock}\n        doubt={doubt}\n        sad={sad}\n        rotateSpeed={rotateSpeed}\n        headRotation={headRotation}\n      />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./styles/App.css\";\nimport Main from \"./pages/Main\"\n\nexport default function App() {\n\n  return (\n    <HashRouter>\n  <Main/>\n    </HashRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}